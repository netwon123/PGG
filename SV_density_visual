


 truvari bench -b pop_as2.vcf.recode.vcf.gz -c pop_eu2.vcf.recode.vcf.gz -r 1000 -p 0  -o comp


 awk '{print $3}' tp-base.vcf > sharegene.txt
# ~/software/plink --vcf pop_eu2.vcf.recode.vcf.gz --make-bed --out pop_eu2 --threads 8
# ~/software/plink --vcf pop_as2.vcf.recode.vcf.gz --make-bed --out pop_as2 --threads 8

# ~/software/plink --bfile pop_as2 --exclude comp/sharegene.txt --recode tab --out pop_as2_unique
# ~/software/plink --bfile pop_eu2 --exclude comp/sharegene.txt --recode tab --out pop_eu2_unique

using R-merge to get the unique gene id of eu/as
bedtools makewindows -g genome_sizes.txt -w 100000 > windows.bed
bedtools intersect -a windows.bed -b sv_positions.bed -c > sv_density.bed


#get the threadsold
```cal_threadsold.py```
import pandas as pd
import numpy as np

# 输入文件
input_file = 'as_density.bed'

# 读取文件到 DataFrame
df = pd.read_csv(input_file, delim_whitespace=True, header=None)

# 提取第四列
fourth_column = df[3]

# 计算前 1% 的阈值
threshold = np.percentile(fourth_column, 99)

# 打印结果
print(f"前 5% 的阈值是: {threshold}")

python cal_threadsold.py
awk '$4 > 19' as_density.bed > as_hotspots.bed
awk '$4 > 5' eu_density.bed > eu_hotspots.bed


#circos
setwd('G:/博士/泛基因组组/PGG-project/analysis/SV stats/')
df<-read.table("INS_density.snpde2n",sep="\t",header=T)
ins<-read.table("INS_density.snpden2",sep="\t",header=T)
del<-read.table("DEL_density.snpden2",sep="\t",header=T)
dup<-read.table("DUP_density.snpden2",sep="\t",header=T)
inv<-read.table("INV_density.snpden2",sep="\t",header=T)
bnd<-read.table("BND_density.snpden2",sep="\t",header=T)
head(df)
df<-ins[,c(1,2,4)]
colnames(df)<-c("Chr","X","Y")
ins<-ins[,c(1,2,4)]
colnames(ins)<-c("Chr","X","Y")
del<-del[,c(1,2,4)]
colnames(del)<-c("Chr","X","Y")
dup<-dup[,c(1,2,4)]
colnames(dup)<-c("Chr","X","Y")
inv<-inv[,c(1,2,4)]
colnames(inv)<-c("Chr","X","Y")
bnd<-bnd[,c(1,2,4)]
colnames(bnd)<-c("Chr","X","Y")
df$X<-df$X/1000000
ins$X<-ins$X/1000000
del$X<-del$X/1000000
dup$X<-dup$X/1000000
inv$X<-inv$X/1000000
bnd$X<-bnd$X/1000000
options(scipen=999)
library(circlize)
library(RColorBrewer)

circos.initialize(factors=df$Chr,x=df$X)

circos.trackPlotRegion(factors=df$Chr,y=df$Y,
                       panel.fun=function(x,y){
                         circos.axis(h='top',labels = TRUE,labels.cex=0.5,labels.facing = "inside",)
                       },track.height = 0.05,bg.col='#E7DAD2')

for(i in 1:19){
  
  circos.text(CELL_META$xcenter, CELL_META$ycenter,
              labels = i,
              sector.index = i,cex=0.7,facing = 'inside',adj=c(0.5,0.5))
}
circos.trackPlotRegion(factors=ins$Chr,y=ins$Y,track.height=0.1)
circos.trackLines(ins$Chr,ins$X,ins$Y,col='#8ECFC9')
circos.trackPlotRegion(factors=del$Chr,y=del$Y,track.height=0.1)
circos.trackLines(del$Chr,del$X,del$Y,col='#FA7F7F')
circos.trackPlotRegion(factors=dup$Chr,y=dup$Y,track.height=0.1)
circos.trackLines(dup$Chr,dup$X,dup$Y,col='#FFBE7A')
circos.trackPlotRegion(factors=inv$Chr,y=inv$Y,track.height=0.1)
circos.trackLines(inv$Chr,inv$X,inv$Y,col='#82B0D2')
circos.trackPlotRegion(factors=bnd$Chr,y=bnd$Y,track.height=0.1)
circos.trackLines(bnd$Chr,bnd$X,bnd$Y,col='#BEB8DC')
circos.clear()

